{
    "lastUpdated": "2024-11-26T23:05:07Z",
    "sota": [
        {
            "name": "11_generalElephant_sn49-2.json",
            "mnist_accuracy": 31.1,
            "loss_function": "safe_sub(safe_sub(safe_add(safe_exp(safe_sub(safe_add(safe_exp(one), sin(safe_mul(y, safe_mul(safe_exp(safe_log(y)), x)))), safe_exp(safe_exp(one)))), safe_add(safe_exp(safe_sub(safe_add(safe_exp(safe_div(safe_mul(safe_div(half, one), safe_exp(half)), one)), relu(std(safe_sub(safe_sub(safe_exp(zero), safe_sub(safe_log(y), sigmoid(safe_mul(safe_mul(half, x), safe_mul(safe_exp(sin(half)), x))))), safe_sub(safe_log(y), safe_sub(safe_log(y), cos(safe_sub(safe_log(y), safe_div(x, safe_exp(sin(half))))))))))), safe_exp(safe_exp(one)))), safe_sub(safe_add(safe_log(safe_mul(safe_add(safe_exp(safe_div(safe_mul(safe_div(half, one), safe_exp(half)), one)), square(cube(cube(safe_exp(sin(half)))))), safe_add(one, square(cube(safe_exp(sin(half))))))), tanh(std(safe_sub(safe_sub(x, safe_sub(safe_log(y), sigmoid(safe_mul(safe_mul(half, x), safe_mul(safe_mul(safe_add(y, one), safe_log(y)), x))))), safe_sub(safe_log(y), safe_sub(safe_log(y), cos(safe_sub(safe_log(y), safe_div(x, safe_exp(sin(half))))))))))), one))), safe_mul(half, safe_mul(safe_mul(safe_mul(y,safe_add(one,square(cube(cube(half))))),safe_add(one,square(cube(cube(half))))), half))), safe_mul(half, half))",
            "training_time": 0.0,
            "complexity": "High"
        },
        {
            "name": "12_generalElephant_sn49-3.json",
            "mnist_accuracy": 30.9,
            "loss_function": "safe_sub(safe_sub(safe_add(safe_exp(safe_sub(safe_add(safe_exp(one), sin(safe_mul(y, safe_mul(safe_exp(safe_log(y)), x)))), safe_exp(safe_exp(one)))), safe_add(safe_exp(safe_sub(safe_add(safe_exp(safe_div(safe_mul(safe_div(half, one), safe_exp(half)), one)), relu(std(safe_sub(safe_sub(safe_exp(zero), safe_sub(safe_log(y), sigmoid(safe_mul(safe_mul(half, x), safe_mul(safe_exp(sin(half)), x))))), safe_sub(safe_log(y), safe_sub(safe_log(y), cos(safe_sub(safe_log(y), safe_div(x, safe_exp(sin(half))))))))))), safe_exp(safe_exp(one)))), safe_sub(safe_add(safe_log(safe_mul(safe_add(safe_exp(safe_div(safe_mul(safe_div(half, one), safe_exp(half)), one)), square(cube(cube(safe_exp(sin(half)))))), safe_add(one, square(cube(safe_exp(sin(half))))))), tanh(std(safe_sub(safe_sub(x, safe_sub(safe_log(y), sigmoid(safe_mul(safe_mul(half, x), safe_mul(safe_mul(safe_add(y, one), safe_log(y)), x))))), safe_sub(safe_log(y), safe_sub(safe_log(y), cos(safe_sub(safe_log(y), safe_div(x, safe_exp(sin(half))))))))))), one))), safe_mul(half, safe_mul(safe_mul(safe_mul(y,safe_add(one,square(cube(cube(half))))),safe_add(one,square(cube(cube(half))))), half))), safe_mul(half, safe_mul(half, half)))",
            "training_time": 0.0,
            "complexity": "High"
        },
        {
            "name": "13_generalElephant_sn49-4.json",
            "mnist_accuracy": 30.9,
            "loss_function": "safe_add(safe_sub(safe_add(safe_exp(safe_sub(safe_add(safe_exp(one), sin(safe_mul(y, safe_mul(safe_exp(safe_log(y)), x)))), safe_exp(safe_exp(one)))), safe_add(safe_exp(safe_sub(safe_add(safe_exp(safe_div(safe_mul(safe_div(half, one), safe_exp(half)), one)), relu(std(safe_sub(safe_sub(safe_exp(zero), safe_sub(safe_log(y), sigmoid(safe_mul(safe_mul(half, x), safe_mul(safe_exp(sin(half)), x))))), safe_sub(safe_log(y), safe_sub(safe_log(y), cos(safe_sub(safe_log(y), safe_div(x, safe_exp(sin(half))))))))))), safe_exp(safe_exp(one)))), safe_sub(safe_add(safe_log(safe_mul(safe_add(safe_exp(safe_div(safe_mul(safe_div(half, one), safe_exp(half)), one)), square(cube(cube(safe_exp(sin(half)))))), safe_add(one, square(cube(safe_exp(sin(half))))))), tanh(std(safe_sub(safe_sub(x, safe_sub(safe_log(y), sigmoid(safe_mul(safe_mul(half, x), safe_mul(safe_mul(safe_add(y, one), safe_log(y)), x))))), safe_sub(safe_log(y), safe_sub(safe_log(y), cos(safe_sub(safe_log(y), safe_div(x, safe_exp(sin(half))))))))))), one))), safe_mul(half, safe_mul(safe_mul(safe_mul(y,safe_add(one,square(cube(cube(half))))),safe_add(one,square(cube(cube(half))))), half))), safe_mul(half, safe_mul(half, half)))",
            "training_time": 0.0,
            "complexity": "High"
        },
        {
            "name": "91_dexserbia_49-W13.json",
            "mnist_accuracy": 31.0,
            "loss_function": "safe_sub(safe_sub(safe_add(safe_exp(safe_sub(safe_add(safe_exp(one), sin(safe_mul(y, safe_mul(safe_exp(safe_log(y)), x)))), safe_exp(safe_exp(one)))), safe_add(safe_exp(safe_sub(safe_add(safe_exp(safe_div(safe_mul(safe_div(half, one), safe_exp(half)), one)), relu(std(safe_sub(safe_sub(safe_exp(half), safe_sub(safe_log(y), sigmoid(safe_mul(safe_mul(half, x), safe_mul(safe_exp(sin(half)), x))))), safe_sub(safe_log(y), safe_sub(safe_log(y), cos(safe_sub(safe_log(y), safe_div(x, safe_exp(sin(half))))))))))), safe_exp(safe_exp(one)))), safe_sub(safe_add(safe_log(safe_mul(safe_add(safe_exp(safe_div(safe_mul(safe_div(half, one), safe_exp(half)), one)), square(cube(cube(safe_exp(sin(half)))))), safe_add(one, square(cube(safe_exp(sin(half))))))), tanh(std(safe_sub(safe_sub(x, safe_sub(safe_log(y), sigmoid(safe_mul(safe_mul(half, x), safe_mul(safe_mul(safe_add(y, one), safe_log(y)), x))))), safe_sub(safe_log(y), safe_sub(safe_log(y), cos(safe_sub(safe_log(y), safe_div(x, safe_exp(sin(half))))))))))), one))), safe_mul(one, safe_mul(safe_sub(safe_mul(y,safe_sub(one,square(cube(cube(half))))),square(cube(cube(half)))), half))), safe_mul(half, safe_div(half, half)))",
            "training_time": 0.0,
            "complexity": "High"
        },
        {
            "name": "9_dexserbia_49-W18.json",
            "mnist_accuracy": 30.7,
            "loss_function": "safe_sub(safe_sub(safe_add(safe_exp(safe_sub(safe_add(safe_exp(one), sin(safe_mul(y, safe_mul(safe_exp(safe_log(y)), x)))), safe_exp(safe_exp(one)))), safe_add(safe_exp(safe_sub(safe_add(safe_exp(safe_div(safe_mul(safe_div(half, one), safe_exp(half)), one)), relu(std(safe_sub(safe_sub(safe_exp(zero), safe_sub(safe_log(y), sigmoid(safe_mul(safe_mul(half, x), safe_mul(safe_exp(sin(half)), x))))), safe_sub(safe_log(y), safe_sub(safe_log(y), cos(safe_sub(safe_log(y), safe_div(x, safe_exp(sin(half))))))))))), safe_exp(safe_exp(one)))), safe_sub(safe_add(safe_log(safe_mul(safe_add(safe_exp(safe_div(safe_mul(safe_div(half, one), safe_exp(half)), one)), square(cube(cube(safe_exp(sin(half)))))), safe_add(one, square(cube(safe_exp(sin(half))))))), tanh(std(safe_sub(safe_sub(x, safe_sub(safe_log(y), sigmoid(safe_mul(safe_mul(half, x), safe_mul(safe_mul(safe_add(y, one), safe_log(y)), x))))), safe_sub(safe_log(y), safe_sub(safe_log(y), cos(safe_sub(safe_log(y), safe_div(x, safe_exp(sin(half))))))))))), one))), safe_mul(half, safe_mul(safe_sub(safe_mul(y,safe_sub(one,square(cube(cube(half))))),square(cube(cube(half)))), half))), safe_mul(half, safe_div(half, half)))",
            "training_time": 0.0,
            "complexity": "High"
        },
        {
            "name": "MSE (Baseline)",
            "mnist_accuracy": 23.3,
            "loss_function": null,
            "training_time": 0.0,
            "complexity": "Low"
        },
        {
            "name": "CrossEntropy (Baseline)",
            "mnist_accuracy": 10.1,
            "loss_function": null,
            "training_time": 0.0,
            "complexity": "Low"
        }
    ],
    "performance": [
        {
            "name": "11_generalElephant_sn49-2.json",
            "values": [
                23.27,
                23.27,
                23.27,
                23.84,
                29.16,
                29.87,
                29.06,
                29.52,
                31.07
            ]
        },
        {
            "name": "12_generalElephant_sn49-3.json",
            "values": [
                23.27,
                23.27,
                23.27,
                24.83,
                29.1,
                29.96,
                29.0,
                29.47,
                30.86
            ]
        },
        {
            "name": "13_generalElephant_sn49-4.json",
            "values": [
                23.27,
                23.27,
                23.27,
                23.86,
                29.17,
                29.88,
                29.07,
                29.52,
                30.95
            ]
        },
        {
            "name": "91_dexserbia_49-W13.json",
            "values": [
                23.27,
                23.27,
                23.27,
                23.85,
                29.17,
                29.87,
                29.07,
                29.52,
                30.97
            ]
        },
        {
            "name": "9_dexserbia_49-W18.json",
            "values": [
                23.27,
                23.27,
                23.27,
                24.76,
                29.09,
                29.97,
                29.01,
                29.48,
                30.69
            ]
        },
        {
            "name": "MSE (Baseline)",
            "values": [
                0.0,
                0.0,
                23.27,
                23.27,
                23.27,
                23.27,
                23.27,
                23.27,
                23.27
            ]
        },
        {
            "name": "CrossEntropy (Baseline)",
            "values": [
                14.36,
                11.11,
                11.59,
                10.91,
                9.72,
                9.36,
                9.85,
                10.7,
                10.06
            ]
        }
    ]
}